import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map.Entry;
import java.util.Scanner;

public class ATM {
   public static void main(String args[])
   {
	   Scanner s=new Scanner(System.in);
	   int sum=0;
	   HashMap<Integer,Integer> hash=new HashMap<Integer,Integer>();
	   hash.put(2000,0);
	   hash.put(500,0);
	   hash.put(200,0);
	   hash.put(100,0);
	   int pin1=1234;
	   int bal=20000;
	   ArrayList<String> ss=new ArrayList<String>();
	   System.out.println("\n ADMIN or USER");
	   while(s.hasNext())
	   {
		   String str=s.next();
		   if(str.equals("ADMIN"))
		   {
			   System.out.println("Enter the pin number");
			   int n2=s.nextInt();
			   int n3=1234;
			   if(n2!=n3)
			   {
				   System.out.println("Invalid pin...");
				   System.out.println("\n ADMIN or USER");
				   continue;
			   }
			   System.out.println("Press 1 for Load Amount. \nPress 2 for ATM Balance. \nPress 3 for EXIT.");
			   int n=s.nextInt();
			   switch(n)
			   {
			   case 1:
			   {
				   for(Entry<Integer, Integer> m : hash.entrySet())
				   {    
					    System.out.println("How many "+m.getKey()+" want to load");
					    int a=s.nextInt();
					    if(a+m.getValue()>100)
					    {
					    	System.out.println("The limit of each amt is 100, so we return "+ ((a+m.getValue())-100) +"\n");
					    	hash.put(m.getKey(),100);
					    }
					    else
					    {
					    	hash.put(m.getKey(),hash.get(m.getKey())+a);
					    }
				   }
				   for(Entry<Integer, Integer> m : hash.entrySet())
				   {    
					   
					    System.out.println(m.getKey()+" "+m.getValue()); 
					    
				   } 
				   System.out.println("Amount is Loaded Successfully");
				   break;
			   }
			   case 2:
			   {
				  sum=0;
				   for(Entry<Integer, Integer> m : hash.entrySet())
				   {    
					   sum+=(m.getKey()*m.getValue());
					   System.out.println(m.getKey()+"->"+m.getValue()); 
				   }
				   System.out.println("Total Balance ATM contains "+ sum);
				   break;
			   }
			   case 3:
			   {
				   break;
			   }
			   default:
			   {
				   System.out.println("Wrong option");
			   }
			   }
		   }
		   else if(str.equals("USER"))
		   {
			   int sum1=0;
			   for(Entry<Integer, Integer> m : hash.entrySet())
			   {    
				   sum1+=(m.getKey()*m.getValue());
				    
			   }
			   
			   System.out.println("Enter your pin number");
			   int pin=s.nextInt();
			   if(pin1!=pin)
			   {
				   System.out.println("INVALID PIN...");
				   System.out.println("\n ADMIN or USER");
				   continue;
			   }
			   System.out.println("Press 1 for Balance Check. \nPress 2 for Withdrawal. \nPress 3 for Deposite.  \nPress 4 for Pin change. \nPress 5 for Mini Statement. \nPress 6 for Transfer");
			   int r=s.nextInt();
			   switch(r)
			   {
			   case 1:
			   {
				   System.out.println("Balance amount is "+bal);
				   break;
			   }
			   case 2:
			   {
				   System.out.println("Enter amount to withdraw ");
				   int amt=s.nextInt();
				   int amt1=amt;
				   int r1=0,r2=0,r3=0,r4=0;
				   if(amt>bal)
				   {
					   System.out.println("You have insufficient balance to withdraw this amount");
				   }
				   else if(amt>sum1)
				   {
					   System.out.println("Insufficient balance in ATM");
				   }
				   
				   else
				   {
					   if(amt1 >= 2000) 
					   { 
					    r1 = amt1 / 2000 ; 
					    amt1 = amt1 % 2000; 
					   }
					   if(amt1 >= 500) 
					   { 
					    r2 = amt1 / 500 ; 
					    amt1 = amt1 % 500; 
					   } 
					   if(amt1 >= 200) 
					   { 
						r3=amt1/200;
					    amt1 =amt1% 200;
					   }
					   if(amt1 >= 100) 
					   { 
					    r4 = amt1 / 100 ; 
					    amt1 = amt1 % 100;
					   }
					   if(amt1!=0)
					   {
						   System.out.println("The amt should be in muliples of 100");
					   }
					   else if(r1<=hash.get(2000))
					   {
						   if(r2<=hash.get(500))
						   {
							   if(r3<=hash.get(200))
							   {
								   if(r4<=hash.get(100))
								   {
									   System.out.println("Your amt will be withdrawn");
									   hash.put(2000,hash.get(2000)-r1);
									   hash.put(500,hash.get(500)-r2);
									   hash.put(200,hash.get(200)-r3);
									   hash.put(100,hash.get(100)-r4);
									   bal-=amt;
									   ss.add(amt+" is withdrawn");
								   }
								   else
								   {
									   System.out.println("The amt should be in muliples of 200");
								   
							       }
							   }
							   else if((r3-hash.get(200))*2<=hash.get(100)-r4)
							   {
								   System.out.println("Your amt will be withdrawn");
								   hash.put(2000,hash.get(2000)-r1);
								   hash.put(500,hash.get(500)-r2);
								   hash.put(200,hash.get(200));
								   hash.put(100,hash.get(100)-r4-((r3-(hash.get(200))*2)));
								   bal-=amt;
								   ss.add(amt+" is withdrawn");
							   }
							   else
							   {
								   System.out.println("The amt should be in muliples of 500");
							   
						       }
						   
					       }
						   else if((r2-hash.get(500))*2<=hash.get(200)-r3 && r2<hash.get(100)-r4)
						   {
							   System.out.println("Your amt will be withdrawn");
							   hash.put(2000,hash.get(2000)-r1);
							   hash.put(500,hash.get(500));
							   hash.put(200,hash.get(200)-r3-((r2-hash.get(500))*2));
							   hash.put(100,hash.get(100)-r4-r2-hash.get(500));
							   bal-=amt;
							   ss.add(amt+" is withdrawn");
						   }
						   else if((r2-hash.get(500))*5<=hash.get(100)-r4)
						   {
							   System.out.println("Your amt will be withdrawn");
							   hash.put(2000,hash.get(2000)-r1);
							   hash.put(500,hash.get(500));
							   hash.put(200,hash.get(200)-r3);
							   hash.put(100,hash.get(100)-r4-((r2-hash.get(500))*5));
							   bal-=amt;
							   ss.add(amt+" is withdrawn");
						   }
						   else
						   {
							   System.out.println("The amt should be in muliples of 2000");
						   }
				       }
					   else if((r1-hash.get(2000))*4<=hash.get(500)-r2)
					   {
						   System.out.println("Your amt will be withdrawn");
						   hash.put(2000,0);
						   hash.put(500,hash.get(500)-((r1-hash.get(2000))*4)-r2);
						   hash.put(200,hash.get(200)-r3);
						   hash.put(100,hash.get(100)-r4);
						   bal-=amt;
						   ss.add(amt+" is withdrawn");
					   }
					   else if((r1-hash.get(2000))*10<=hash.get(200)-r3)
					   {
						   System.out.println("Your amt will be withdrawn");
						   hash.put(2000,0);
						   hash.put(500,hash.get(500)-r1);
						   hash.put(200,hash.get(200)-r3-((r1-(hash.get(2000))*10)));
						   hash.put(100,hash.get(100)-r4);
						   bal-=amt;
						   ss.add(amt+" is withdrawn");
					   }
					   else if((r1-hash.get(2000))*20<=hash.get(100)-r2)
					   {
						   System.out.println("Your amt will be withdrawn");
						   hash.put(2000,hash.get(2000));
						   hash.put(500,hash.get(500)-r1);
						   hash.put(200,hash.get(200)-r3);
						   hash.put(100,hash.get(100)-r4-((r1-(hash.get(2000))*20)));
						   bal-=amt;
						   ss.add(amt+" is withdrawn");
					   }
					   else
					   {
						   System.out.println("Insufficient balance in ATM");
					   }
				   }
				   break;
			   }
			   case 3:
			   {
				   System.out.println("Enter the amt to deposite:");
				   int x=s.nextInt(),x2=0;;
				   for(Entry<Integer, Integer> m : hash.entrySet())
				   {    
					    System.out.println("How many "+m.getKey()+" want to load");
					    int x1=s.nextInt();
					    hash.put(m.getKey(),hash.get(m.getKey())+x1);
					    x2+=x1*m.getKey();
				   }
				   if(x2!=x)
				   {
					   System.out.println("Your denomination is wrong");
				   }
				   else
				   {
					   bal+=x;
					   System.out.println("Successfully deposited");
					   ss.add(x+" is deposited");
				   }
				   break;
			   }
			   case 4:
			   {
				   System.out.println("Enter your pin...");
				   int y1=s.nextInt();
				   if(pin1==y1)
				   {
					   System.out.println("Enter the new pin number");
					   int y2=s.nextInt();
					   System.out.println("Re-enter new pin");
					   int y3=s.nextInt();
					   if(y2==y3)
					   {
						   pin1=y2;
						   System.out.println("Your pin is changed successfully");
					   }
					   else
					   {
						   System.out.println("Pin mismatch");
					   }
				   }
				   else
				   {
					   System.out.println("Invalid pin....");
				   }
				   break;
			   }
			   case 5:
			   {
				   System.out.println();
				   if(ss.size()<5)
				   {
					   for(int i=0;i<ss.size();i++)
					   {
						   System.out.println(ss.get(i));
					   }
				   }
				   else
				   {
					   for(int i=ss.size()-5;i<ss.size();i++)
					   {
						   System.out.println(ss.get(i));
					   }
				   }
				   System.out.println();
				   break;
			   }
			   case 6:
			   {
				   
				   System.out.println("Enter the id you want to transfer");
				   String w=s.next();
				   System.out.println("Enter the amount you want to transfer");
				   int num=s.nextInt();
				   System.out.println("The amount is transfered successfully");
				   bal-=num;
				   ss.add(num+" is transfered to "+w);
				   break;
			   }
			   default:
			   {
				   System.out.println("Wrong option");
				   break;
			   }
			 }
		   }
		   else
		   {
			   System.out.println("Wrong Statement");
		   }
		   System.out.println("\n ADMIN or USER");
	   }
  }
}
